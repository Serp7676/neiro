// app/api/chat/route.ts
import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { readFile } from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import * as cheerio from 'cheerio';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –ß—Ç–µ–Ω–∏–µ .txt —Ñ–∞–π–ª–æ–≤
async function loadTxt(filename: string): Promise<string> {
  const filePath = path.join(process.cwd(), 'public', 'docs', filename);
  return await readFile(filePath, 'utf-8');
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ URL
async function extractTextFromUrl(url: string): Promise<string> {
  try {
    const res = await fetch(url);
    const html = await res.text();
    const $ = cheerio.load(html);
    const text = $('body').text().replace(/\s+/g, ' ').trim();
    return text.slice(0, 3000); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ URL:', err);
    return '[–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Å—ã–ª–∫–µ]';
  }
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export async function POST(req: NextRequest) {
  const { message } = await req.json();

  try {
    const instructions = await loadTxt('instructions.txt');
    const knowledge = await loadTxt('knowledge.txt');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    // const urls = message.match(urlRegex) || [];
    const urls = ['https://academy-polymer.ru/kursy']

    let extractedContent = '';
    for (const url of urls) {
      const content = await extractTextFromUrl(url);
      extractedContent += `\nüîó –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å ${url}:\n${content}\n`;
    }

    const systemPrompt = `
–í—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π GPT-–∞–≥–µ–Ω—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –∑–Ω–∞–Ω–∏–π:

üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
${instructions}

üìö –ó–Ω–∞–Ω–∏—è:
${knowledge}

${extractedContent ? '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:' + extractedContent : ''}

–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
`;

    const chat = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message },
      ],
    });

    const response = chat.choices[0].message.content;
    return NextResponse.json({ response });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /api/chat:', error);
    return NextResponse.json({ error: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', details: String(error) }, { status: 500 });
  }
}
